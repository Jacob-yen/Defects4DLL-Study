# mutation_levels = ["device", "graph", "variable", "api", "control_flow",]
# mutation_levels = ["api", "control_flow",]
# mutation_levels = ["control_flow"]


tf_builtin_public_dict = {'tf.python.keras.activations.softmax': 'tf.keras.activations.softmax',
                          'tf.python.keras.backend.placeholder': 'tf.compat.v1.placeholder',
                          'tf.python.saved_model.simple_save.simple_save': 'tf.compat.v1.saved_model.simple_save',
                          'tf.python.keras.metrics.CategoricalAccuracy': 'tf.keras.metrics.CategoricalAccuracy',
                          'tf.ragged.map_flat_values': 'tf.ragged.map_flat_values', 'tf.print': 'tf.print',
                          'tf.keras.Input': 'tf.keras.Input',
                          'tf.divide': 'tf.divide', 'tf.constant': 'tf.constant',
                          'tf.python.ops.sparse_ops.sparse_tensor_to_dense': 'tf.compat.v1.sparse_tensor_to_dense',
                          'tf.keras.Model': 'tf.keras.Model', 'tf.GradientTape': 'tf.GradientTape',
                          'tf.python.keras.keras_parameterized.TestCase': 'tf.test.TestCase',
                          'tf.python.eager.def_function.function': 'tf.function', 'tf.reduce_mean': 'tf.reduce_mean',
                          'tf.python.ops.random_ops.random_uniform': 'tf.initializers.random_uniform',
                          'tf.python.keras.layers.pooling.GlobalAveragePooling1D': 'tf.keras.layers.GlobalAveragePooling1D',
                          'tf.experimental.numpy.kron': 'tf.experimental.numpy.kron',
                          'tf.python.keras.Model': 'tf.keras.Model',
                          'tf.keras.layers.Input': 'tf.keras.layers.Input',
                          'tf.python.keras.utils.np_utils.to_categorical': 'tf.keras.utils.to_categorical',
                          'tf.python.ops.array_ops.boolean_mask': 'tf.boolean_mask',
                          'tf.python.keras.metrics.Metric': 'tf.keras.metrics.Metric',
                          'tf.python.eager.context.executing_eagerly': 'tf.executing_eagerly',
                          'tf.python.ops.math_ops.range': 'tf.range',
                          'tf.keras.layers.Layer': 'tf.keras.layers.Layer',
                          'tf.python.client.session.Session': 'tf.compat.v1.Session',
                          'tf.python.ops.math_ops.cast': 'tf.cast', 'tf.python.ops.array_ops.ones': 'tf.ones',
                          'tf.python.keras.layers.Input': 'tf.keras.layers.Input',
                          'tf.python.ops.math_ops.reduce_sum': 'tf.reduce_sum',
                          'tf.python.framework.dtypes.float32': 'tf.experimental.numpy.float32',
                          'tf.python.ops.check_ops.assert_near': 'tf.debugging.assert_near',
                          'tf.python.ops.image_ops.central_crop': 'tf.image.central_crop',
                          'tf.keras.metrics.Recall': 'tf.keras.metrics.Recall',
                          'tf.keras.models.Sequential': 'tf.keras.models.Sequential',
                          'tf.python.ops.array_ops.identity': 'tf.identity',
                          'tf.python.ops.array_ops.shape': 'tf.shape',
                          'tf.python.keras.callbacks.Callback': 'tf.keras.callbacks.Callback',
                          'tf.python.ops.summary_ops_v2.trace_export': 'tf.summary.trace_export',
                          'tf.python.training.rmsprop.RMSPropOptimizer': 'tf.compat.v1.train.RMSPropOptimizer',
                          'tf.python.framework.constant_op.constant': 'tf.constant', 'tf.reverse': 'tf.reverse',
                          'tf.keras.Sequential': 'tf.keras.Sequential',
                          'tf.python.keras.preprocessing.image.smart_resize': 'tf.keras.preprocessing.image.smart_resize',
                          'tf.keras.losses.Huber': 'tf.keras.losses.huber',
                          'tf.python.keras.engine.input_layer.Input': 'tf.keras.Input',
                          'tf.keras.losses.mse': 'tf.keras.losses.mse', 'tf.python.framework.ops.Graph': 'tf.Graph',
                          'tf.assert_equal': 'tf.assert_equal', 'tf.keras.losses.Loss': 'tf.keras.losses.Loss',
                          'tf.python.keras.Input': 'tf.keras.Input',
                          'tf.python.keras.losses.binary_crossentropy': 'tf.keras.losses.binary_crossentropy',
                          'tf.python.keras.layers.Concatenate': 'tf.keras.layers.Concatenate',
                          'tf.keras.optimizers.Adam': 'tf.keras.optimizers.Adam',
                          'tf.compat.v1.disable_eager_execution': 'tf.compat.v1.disable_eager_execution',
                          'tf.python.keras.applications.imagenet_utils.preprocess_input': 'tf.keras.applications.imagenet_utils.preprocess_input',
                          'tf.python.ops.sparse_ops.from_dense': 'tf.sparse.from_dense',
                          'tf.python.keras.models.Sequential': 'tf.keras.models.Sequential',
                          'tf.python.keras.layers.ReLU': 'tf.keras.layers.ReLU',
                          'tf.python.ops.summary_ops_v2.trace_on': 'tf.summary.trace_on',
                          'tf.python.saved_model.load.load': 'tf.saved_model.load',
                          'tf.convert_to_tensor': 'tf.convert_to_tensor',
                          'tf.optimizers.SGD': 'tf.optimizers.SGD', 'tf.image.resize': 'tf.image.resize',
                          'tf.python.ops.ragged.ragged_factory_ops.constant': 'tf.ragged.constant',
                          'tf.config.experimental_run_functions_eagerly': 'tf.config.experimental_run_functions_eagerly',
                          'tf.python.keras.layers.Conv2D': 'tf.keras.layers.Conv2D',
                          'tf.python.keras.models.Model': 'tf.keras.models.Model',
                          'tf.python.platform.test.TestCase': 'tf.test.TestCase', 'tf.shape': 'tf.shape',
                          'tf.python.keras.layers.Layer': 'tf.keras.layers.Layer',
                          'tf.initializers.he_uniform': 'tf.initializers.he_uniform',
                          'tf.initializers.he_normal': 'tf.initializers.he_normal',
                          'tf.python.saved_model.save.save': 'tf.saved_model.save',
                          'tf.python.keras.layers.Dense': 'tf.keras.layers.Dense',
                          'tf.python.keras.layers.serialize': 'tf.keras.layers.serialize',
                          'tf.python.ops.script_ops.numpy_function': 'tf.numpy_function',
                          'tf.keras.layers.Dense': 'tf.keras.layers.Dense',
                          'tf.keras.metrics.Mean': 'tf.keras.metrics.Mean',
                          'tf.keras.optimizers.Adamax': 'tf.keras.optimizers.Adamax',
                          'tf.keras.backend.set_floatx': 'tf.keras.backend.set_floatx',
                          'tf.reduce_max': 'tf.reduce_max',
                          'tf.python.ops.array_ops.placeholder': 'tf.compat.v1.placeholder', 'tf.Module': 'tf.Module',
                          'tf.keras.callbacks.TensorBoard': 'tf.keras.callbacks.TensorBoard',
                          'tf.ragged.stack': 'tf.ragged.stack',
                          'tf.python.framework.sparse_tensor.SparseTensor': 'tf.SparseTensor',
                          'tf.python.keras.layers.dense_attention.AdditiveAttention': 'tf.keras.layers.AdditiveAttention',
                          'tf.python.keras.layers.preprocessing.text_vectorization.TextVectorization': 'tf.keras.layers.TextVectorization',
                          'tf.python.keras.layers.normalization_v2.BatchNormalization': 'tf.keras.layers.BatchNormalization',
                          'tf.python.keras.optimizer_v2.adam.Adam': 'tf.keras.optimizers.Adam',
                          'tf.image.flip_left_right': 'tf.image.flip_left_right',
                          'tf.python.keras.layers.Lambda': 'tf.keras.layers.Lambda',
                          'tf.python.keras.models.clone_model': 'tf.keras.models.clone_model',
                          'tf.python.ops.signal.fft_ops.fftshift': 'tf.signal.fftshift',
                          'tf.python.framework.dtypes.int32': 'tf.experimental.numpy.int32',
                          'tf.python.ops.array_ops.sequence_mask': 'tf.sequence_mask',
                          'tf.python.ops.summary_ops_v2.create_file_writer': 'tf.summary.create_file_writer',
                          'tf.python.keras.backend.function': 'tf.function',
                          'tf.saved_model.save': 'tf.saved_model.save',
                          'tf.python.keras.engine.base_layer.Layer': 'tf.keras.layers.Layer',
                          'tf.python.ops.math_ops.reduce_variance': 'tf.math.reduce_variance',
                          'tf.python.eager.test.TestCase': 'tf.test.TestCase',
                          'tf.python.ops.partitioned_variables.fixed_size_partitioner': 'tf.compat.v1.fixed_size_partitioner',
                          'tf.python.ops.image_ops_impl.sample_distorted_bounding_box': 'tf.image.sample_distorted_bounding_box',
                          'tf.fill': 'tf.fill',
                          'tf.RaggedTensor.from_row_splits': 'tf.RaggedTensor.from_row_splits',
                          'tf.function': 'tf.function',
                          'tf.ones': 'tf.ones',
                          'tf.python.ops.image_ops_impl.sample_distorted_bounding_box_v2': 'tf.image.sample_distorted_bounding_box',
                          'tf.python.ops.variable_scope.variable': 'tf.keras.backend.variable',
                          'tf.python.ops.embedding_ops.embedding_lookup_v2': 'tf.nn.embedding_lookup',
                          'tf.python.ops.gradients_impl.gradients': 'tf.gradients',
                          'tf.python.ops.variables.Variable': 'tf.Variable',
                          'tf.python.ops.variables.VariableV1': 'tf.Variable',
                          'tf.python.keras.layers.LeakyReLU': 'tf.keras.layers.LeakyReLU',
                          'tf.python.ops.math_ops.divide': 'tf.keras.ops.divide',
                          'tf.python.ops.sparse_ops.sparse_transpose': 'tf.python.ops.sparse_ops.sparse_transpose',
                          'tf.python.ops.ragged.ragged_tensor.RaggedTensor.from_tensor': 'tf.python.ops.ragged.ragged_tensor.RaggedTensor.from_tensor',
                          'tf.ones_like': 'tf.ones_like',
                          'tf.reshape': 'tf.reshape',
                          'tf.python.ops.image_ops.transpose': 'tf.transpose',
                          'tf.python.keras.backend.reverse': 'tf.reverse',
                          'tf.python.keras.layers.core.Dense': 'tf.keras.layers.Dense',
                          'tf.python.ops.variable_scope.get_variable': 'tf.compat.v1.get_variable',
                          'tf.python.keras.backend.ctc_decode': 'tf.python.keras.backend.ctc_decode',
                          'tf.python.ops.histogram_ops.histogram_fixed_width_bins': 'tf.histogram_fixed_width_bins',
                          'tf.lite.TFLiteConverter.from_saved_model': 'tf.lite.TFLiteConverter.from_saved_model',
                          'tf.python.training.slot_creator.create_slot': 'tf.python.training.slot_creator.create_slot',
                          'tf.python.keras.mixed_precision.autocast_variable.create_autocast_variable': 'tf.python.keras.mixed_precision.autocast_variable.create_autocast_variable',
                          'tf.python.keras.testing_utils.layer_test': 'tf.python.keras.testing_utils.layer_test',
                          'tf.python.framework.ops.convert_to_tensor': 'tf.convert_to_tensor',
                          'tf.python.keras.callbacks.CallbackList': 'tf.keras.callbacks.CallbackList',
                          'tf.lite.python.interpreter.Interpreter': 'tf.lite.Interpreter',
                          'tf.python.framework.ops.control_dependencies': 'tf.control_dependencies',
                          'tf.python.keras.losses.categorical_hinge': 'tf.keras.losses.categorical_hinge',
                          }
