constraints:
  boxes:
    descp: A 2-D float `Tensor` of shape `[num_boxes, 4]`.
    dtype:
    - tf.tensor
    ndim:
    - '2'
    shape:
    - '[num_boxes,4]'
    tensor_t:
    - tf.tensor
  scores:
    descp: A 1-D float `Tensor` of shape `[num_boxes]` representing a single score
      corresponding to each box (each row of boxes).
    dtype:
      - tf.tensor
    ndim:
      - '1'
    shape:
      - '[num_boxes]'
    tensor_t:
      - tf.tensor
  max_output_size:
    descp: A scalar integer `Tensor` representing the maximum number of boxes to be
      selected by non max suppression.
    dtype:
      - int
    ndim:
      - '0'
    range:
      - '[0,inf)'
  iou_threshold:
    default: '0.5'
    descp: A float representing the threshold for deciding whether boxes overlap too
      much with respect to IOU.
    dtype:
    - float
    ndim:
    - '0'
  name:
    default: None
    descp: A name for the operation (optional).
    dtype:
    - string
    ndim:
    - '0'
  score_threshold:
    default: '-inf'
    descp: A float representing the threshold for deciding when to remove boxes based
      on score.
    dtype:
    - float
    ndim:
    - '0'
  soft_nms_sigma:
    default: '0.0'
    descp: A scalar float representing the Soft NMS sigma parameter; See Bodla et
      al, https://arxiv.org/abs/1704.04503).  When`soft_nms_sigma=0.0` (which is default),
      we fall back to standard (hard) NMS.
    dtype:
    - float
    ndim:
    - '0'
inputs:
  optional:
  - iou_threshold
  - score_threshold
  - soft_nms_sigma
  - name
  required:
  - boxes
  - scores
  - max_output_size